<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Popoory67</title>
 <link href="https://popoory67.github.io//atom.xml" rel="self"/>
 <link href="https://popoory67.github.io//"/>
 <updated>2024-03-22T22:59:35+00:00</updated>
 <id>https://popoory67.github.io/</id>
 <author>
   <name>popoory67</name>
   <email>bozeury@gmail.com</email>
 </author>

 
 <entry>
   <title>2. Jekyll 시작하기</title>
   <link href="https://popoory67.github.io//jekyll/2024-03-23-jekyll-tutorial/"/>
   <updated>2024-03-22T00:00:00+00:00</updated>
   <id>https://popoory67.github.io//jekyll/Jekyll(2).ko</id>
   <content type="html">&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#jekyll-시작하기&quot;&gt;Jekyll 시작하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jekyll-웹-사이트&quot;&gt;Jekyll 웹 사이트&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-github-repository-생성&quot;&gt;1) Github Repository 생성&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-local-작업-환경-만들기&quot;&gt;2) Local 작업 환경 만들기&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-jekyll-파일-생성&quot;&gt;3) Jekyll 파일 생성&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#4-local-빌드&quot;&gt;4) Local 빌드&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#5-commit-and-push&quot;&gt;5) Commit and Push&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#6-deploy&quot;&gt;6) Deploy&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#7-웹-사이트-접속하기&quot;&gt;7) 웹 사이트 접속하기&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#local-서버-문제&quot;&gt;Local 서버 문제&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#division-문제&quot;&gt;Division 문제&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;이전 포스팅에서 &lt;a href=&quot;../2024-03-22-about-jekyll/&quot;&gt;Jekyll이 무엇인지, 사용하는 목적과 목표가 무엇인지&lt;/a&gt; 알아봤습니다.&lt;/p&gt;

&lt;p&gt;이번 포스팅에서는 Jekyll을 &lt;em&gt;어떻게 사용하는지&lt;/em&gt; 간략하게 알아보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-시작하기&quot;&gt;&lt;strong&gt;Jekyll 시작하기&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;이전 포스팅에서 Jekyll은 Ruby 기반 프레임워크라고 설명했습니다.&lt;/p&gt;

&lt;p&gt;그래서 &lt;a href=&quot;https://jekyllrb-ko.github.io/docs/&quot;&gt;Jekyll 설치&lt;/a&gt;는 크게 두 단계로 진행됩니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Ruby 기반 프레임워크이기 때문에 &lt;a href=&quot;https://www.ruby-lang.org/ko/downloads/&quot;&gt;Ruby 설치&lt;/a&gt;가 필요합니다.&lt;br /&gt;
Ruby는 공식 사이트에서 &lt;em&gt;2.4.0 이상의 버전&lt;/em&gt;을 다운로드 받으면 됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ruby 설치 후, &lt;strong&gt;Jekyll&lt;/strong&gt;과 &lt;strong&gt;Bundler Gem&lt;/strong&gt;을 설치해줘야 합니다.&lt;br /&gt;&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install jekyll bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;기본적으로 위 커맨드를 Windows CMD, Mac Terminal에 입력하여 설치하지만, 더 자세한 내용이 필요하다면 아래 링크를 참고하시는 것이 좋습니다.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://jekyllrb-ko.github.io/docs/installation/windows/&quot;&gt;Windows 설치 방법&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://jekyllrb-ko.github.io/docs/installation/macos/&quot;&gt;Mac 설치 방법&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;jekyll-웹-사이트&quot;&gt;&lt;strong&gt;Jekyll 웹 사이트&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Jekyll 설치가 완료되었다면, 이제 웹 사이트를 만들 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;1-github-repository-생성&quot;&gt;1) Github Repository 생성&lt;/h3&gt;
&lt;p&gt;웹 사이트의 저장소 겸 경로가 될 Github Repository를 생성합니다.&lt;/p&gt;

&lt;p&gt;웹 페이지를 저장소에 올려서 운영하는 &lt;em&gt;정적 웹 사이트&lt;/em&gt; 방식을 사용하기 위해서는 저장소가 필요합니다.
Github에서는 Repository를 정적 웹 사이트로 운영할 수 있는 시스템이 있기 때문에 이것을 활용할 것입니다.&lt;/p&gt;

&lt;p&gt;Github page를 만드는 내용은 아래 사이트를 참고바랍니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://docs.github.com/ko/pages/quickstart&quot;&gt;Github page 시작하기&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;2-local-작업-환경-만들기&quot;&gt;2) Local 작업 환경 만들기&lt;/h3&gt;
&lt;p&gt;Repository를 만들었다면 Local에서 작업할 수 있는 환경을 만들어야 합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Github에서 생성한 github.io의 Repository에서 경로를 복사합니다.
&lt;img src=&quot;/assets/images/jekyll/image9.jpg&quot; alt=&quot;Alt text&quot; class=&quot;post-markdown-img80&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;형상관리 툴을 사용하여 Local에서 Clone합니다.
소스 경로(URL)과 Clone할 디렉토리를 입력합니다.
(아래 이미지는 SourceTree 기준)
&lt;img src=&quot;/assets/images/jekyll/image10.jpg&quot; alt=&quot;Alt text&quot; class=&quot;post-markdown-img80&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이제 Local에서 작업할 수 있는 환경에 만들어졌습니다.&lt;/p&gt;

&lt;h3 id=&quot;3-jekyll-파일-생성&quot;&gt;3) Jekyll 파일 생성&lt;/h3&gt;
&lt;p&gt;지금은 Repository에는 웹 사이트라고 할만한 것이 없습니다.
여기에 HTML, Script, CSS, Imagae 등 여러가지 리소스를 추가해서 웹 사이트를 만들어나갈 것입니다.&lt;/p&gt;

&lt;p&gt;이 리소스들은 그대로 올려도 반영되지만, 우리는 왜 굳이 Jekyll을 사용하는지 이전 포스트에서 충분히 알았습니다.
그래서 Jekyll을 사용할 수 있도록 Jekyll에서 제시하는 파일 구조를 만들 것입니다.&lt;/p&gt;

&lt;p&gt;우선, Windows CMD나 Mac Terminal 작업을 기준으로 설명하겠습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;콘솔 창에서 Repository의 상위 폴더로 이동합니다.&lt;br /&gt;
e.g) 폴더 경로가 C:\test라면 &lt;strong&gt;cd C:\&lt;/strong&gt; 입니다.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd [Repository 상위 폴더]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;새로운 Jekyll 사이트를 생성합니다.&lt;br /&gt;
e.g) Repository 이름이 test라면 &lt;strong&gt;jekyll new test&lt;/strong&gt; 입니다.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll new [Repository 이름]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;/assets/images/jekyll/image11.jpg&quot; alt=&quot;Alt text&quot; class=&quot;post-markdown-img100&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그러면 아래와 같은 파일들이 생성됩니다.
&lt;img src=&quot;/assets/images/jekyll/image12.jpg&quot; alt=&quot;Alt text&quot; class=&quot;post-markdown-img100&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-local-빌드&quot;&gt;4) Local 빌드&lt;/h3&gt;
&lt;p&gt;Jekyll을 사용할 수 있는 환경이 만들어졌습니다.&lt;/p&gt;

&lt;p&gt;파일의 역할이나 구조를 알아야 하지만, 지금은 html을 Jekyll로 생성해보는 것을 목표로 하겠습니다.&lt;/p&gt;

&lt;p&gt;Local에서 빌드하고 정상적으로 동작하는지 테스트해보겠습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Repository로 이동
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd [Repository 경로]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Local Build
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Local Server Test
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;앞서 진행한 내용에 큰 문제가 없다면 아래 로그와 같을 것입니다.
&lt;img src=&quot;/assets/images/jekyll/image13.jpg&quot; alt=&quot;Alt text&quot; class=&quot;post-markdown-img100&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;참고: &lt;a href=&quot;#local-서버-문제&quot;&gt;만약 문제가 있다면&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이제 &lt;a href=&quot;http://localhost:4000&quot;&gt;http://localhost:4000&lt;/a&gt;으로 접속하여 웹 사이트가 정상 출력이 되는지 확인해봅니다.
&lt;img src=&quot;/assets/images/jekyll/image15.jpg&quot; alt=&quot;Alt text&quot; class=&quot;post-markdown-img80&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 화면이 나왔다면 성공입니다.&lt;/p&gt;

&lt;h3 id=&quot;5-commit-and-push&quot;&gt;5) Commit and Push&lt;/h3&gt;
&lt;p&gt;Local에서 문제없이 작동했으니, Repository에 반영합니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit -a -m &quot;your message&quot;
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;6-deploy&quot;&gt;6) Deploy&lt;/h3&gt;
&lt;p&gt;Repository에 반영이 되었다면 Github Repository에서 Build and Deploy를 시작합니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Build: 소스 코드를 실행 가능한 소프트웨어로 변환하는 과정
Deploy: 빌드된 소프트웨어를 특정 환경에 설치하고 구성하는 과정&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Deploy까지 성공했다면 아래와 같을 것입니다.
&lt;img src=&quot;/assets/images/jekyll/image16.jpg&quot; alt=&quot;Alt text&quot; class=&quot;post-markdown-img100&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;7-웹-사이트-접속하기&quot;&gt;7) 웹 사이트 접속하기&lt;/h3&gt;
&lt;p&gt;별도로 URL 설정을 바꾸지 않았다면, Repository 이름과 URL이 동일할 것입니다.
Deploy가 성공적으로 완료가 되었다면 URL로 접속해봅니다.&lt;/p&gt;

&lt;p&gt;경로는 https로 시작해야 합니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://[나의 Github ID].github.io/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;성공했다면 Local 서버에서 확인했던 화면과 동일할 것입니다.
&lt;img src=&quot;/assets/images/jekyll/image15.jpg&quot; alt=&quot;Alt text&quot; class=&quot;post-markdown-img80&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다른 사람도 접근할 수 있는 웹 사이트를 Jekyll로 만들었습니다.&lt;/p&gt;

&lt;p&gt;지금은 기본 화면이지만, 리소스를 사용하기에 따라 좋은 웹 사이트를 만들 수 있습니다.
자세한 내용은 아래 Theme 설명서를 읽고 참고하시길 바랍니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://jekyllrb-ko.github.io/docs/themes/&quot;&gt;Jekyll Theme&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;local-서버-문제&quot;&gt;&lt;strong&gt;Local 서버 문제&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;division-문제&quot;&gt;Division 문제&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;현상&lt;/strong&gt;&lt;br /&gt;
아래와 같은 메시지가 발생&lt;br /&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Deprecation Warning: Using / for division outside of calc() is deprecated and will be removed in Dart Sass 2.0.0.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;/assets/images/jekyll/image14.jpg&quot; alt=&quot;Alt text&quot; class=&quot;post-markdown-img100&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;해결 방법&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;나눗셈 연산자는 더이상 사용하지 않으니 math, calc 함수를 사용하라는 Warning 메시지입니다.&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;문제가 발생한 파일로 이동하여 / 연산자를 제거하고 math, calc 함수로 대체하면 됩니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;하지만 Warning이므로 반드시 해결하지 않아도 됩니다.&lt;/li&gt;
      &lt;li&gt;만약에 기본 페이지 테스트 진행 중에 발생했다면, 이후에 다른 템플릿이나 화면을 구성하게 될테니 수정하지 않아도 괜찮습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>1. What is "Jekyll"</title>
   <link href="https://popoory67.github.io//jekyll/2024-03-22-about-jekyll/"/>
   <updated>2024-03-22T00:00:00+00:00</updated>
   <id>https://popoory67.github.io//jekyll/Jekyll(1)</id>
   <content type="html">&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#jekyll&quot;&gt;Jekyll&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-example&quot;&gt;1) Example&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-jekylls-role&quot;&gt;2) Jekyll’s Role&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dynamic-websites&quot;&gt;Dynamic Websites&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-how-dynamic-websites-work&quot;&gt;1) How Dynamic Websites Work&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-example&quot;&gt;2) Example&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-to-operate-a-website&quot;&gt;How to Operate a Website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#static-websites&quot;&gt;&lt;strong&gt;Static Websites&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#in-conclusion&quot;&gt;In Conclusion…&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Users starting with &lt;strong&gt;Jekyll&lt;/strong&gt; likely aim to create their own blog or website.&lt;/p&gt;

&lt;p&gt;So, what exactly is “Jekyll”, and why is it used for website creation?&lt;/p&gt;

&lt;h2 id=&quot;jekyll&quot;&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; is a framework that generates files for &lt;strong&gt;Static websites&lt;/strong&gt;. 
It is developed in Ruby and automatically creates files according to the format I define.&lt;/p&gt;

&lt;p&gt;Let’s assume a situation to understand what &lt;em&gt;automatically generates&lt;/em&gt; means.&lt;/p&gt;

&lt;h3 id=&quot;1-example&quot;&gt;1) Example&lt;/h3&gt;
&lt;p&gt;Consider there are web pages named A, B, and C.
&lt;img src=&quot;/assets/images/jekyll/image7.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A, B, and C look the same but differ in color.&lt;/p&gt;

&lt;p&gt;Explained in HTML terms, this is a situation that &lt;em&gt;the structure is the same, but data varies.&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt; is &lt;strong&gt;a text file&lt;/strong&gt; describing where and how contents like images and texts are arranged.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Represented in text, it looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt; A Contents &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt; B Contents &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt; C Contents &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Analyzing this, it is found:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;“&amp;lt;html&amp;gt; &amp;lt;/html&amp;gt;” repeats.&lt;/li&gt;
  &lt;li&gt;“Contents” vary.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thus, it’s cumbersome to input “&amp;lt;html&amp;gt; &amp;lt;/html&amp;gt;” every time I write HTML.&lt;/p&gt;

&lt;p&gt;However, there is no need for that with “Jekyll”.&lt;/p&gt;

&lt;h3 id=&quot;2-jekylls-role&quot;&gt;2) Jekyll’s Role&lt;/h3&gt;
&lt;p&gt;Jekyll takes on the task of generating HTML.&lt;/p&gt;

&lt;p&gt;It manages files by separating the webpage’s structure, &lt;strong&gt;HTML&lt;/strong&gt;, and the content, &lt;strong&gt;markdown&lt;/strong&gt;.
&lt;img src=&quot;/assets/images/jekyll/image8.jpg&quot; alt=&quot;Alt text&quot; /&gt;
Then, through a process called &lt;strong&gt;build&lt;/strong&gt;, it produces web pages.&lt;/p&gt;

&lt;p&gt;It’s convenient that Jekyll generates HTML, but why is this process necessary?&lt;/p&gt;

&lt;p&gt;To explain simply, let’s briefly talk about and compare to dynamic websites.&lt;/p&gt;

&lt;h2 id=&quot;dynamic-websites&quot;&gt;&lt;strong&gt;Dynamic Websites&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;1-how-dynamic-websites-work&quot;&gt;1) How Dynamic Websites Work&lt;/h3&gt;
&lt;p&gt;Well-known websites like Google and Amazon generate HTML on the server and present it to the viewers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/jekyll/image1.jpg&quot; alt=&quot;Alt text&quot; /&gt;
This is called the dynamic website approach.&lt;/p&gt;

&lt;h3 id=&quot;2-example&quot;&gt;2) Example&lt;/h3&gt;
&lt;p&gt;For a typical scenario, consider:&lt;/p&gt;

&lt;p&gt;A user searches for the word “Apple”.
&lt;img src=&quot;/assets/images/jekyll/image2.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, the server finds websites containing information about Apple and displays the search results to the user.
&lt;img src=&quot;/assets/images/jekyll/image3.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this process, the server:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Finds the Apple data.&lt;/li&gt;
  &lt;li&gt;Generates an HTML file containing the Apple data.&lt;/li&gt;
  &lt;li&gt;Displays the HTML on the user’s screen.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is how websites dynamically display content.&lt;/p&gt;

&lt;h2 id=&quot;how-to-operate-a-website&quot;&gt;&lt;strong&gt;How to Operate a Website&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Though we’ve explained generating HTML through a server, is a server absolutely necessary to operate a website?&lt;/p&gt;

&lt;p&gt;Not necessarily.&lt;/p&gt;

&lt;p&gt;The essence of a website is &lt;em&gt;viewing the HTML.&lt;/em&gt;
&lt;img src=&quot;/assets/images/jekyll/image4.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, could we not upload the HTML file to a &lt;em&gt;repository&lt;/em&gt; for others to download and view?
&lt;img src=&quot;/assets/images/jekyll/image5.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yes, that’s possible.&lt;/p&gt;

&lt;p&gt;This method of uploading and operating HTML in a repository is known as a &lt;strong&gt;static website&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;static-websites&quot;&gt;&lt;strong&gt;Static Websites&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Static websites &lt;strong&gt;pre-generate all&lt;/strong&gt; HTML making up the website and upload these files to a repository for others to view.
&lt;img src=&quot;/assets/images/jekyll/image6.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Therefore, unlike dynamic methods, there’s no need to generate HTML in real-time, which is a significant advantage in terms of speed.&lt;/p&gt;

&lt;p&gt;However, without a system to create the website like dynamic websites do, &lt;strong&gt;all HTML must be prepared in advance.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thus, the volume of HTML to be stored is considerable, and there’s a lot of repetitive content. From the perspective of writing HTML, it’s highly inefficient to repeat the same tasks.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Advantages&lt;br /&gt;
    &lt;ol&gt;
      &lt;li&gt;No need to generate HTML in real-time.&lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;Faster web page display speed.&lt;br /&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Disadvantages&lt;br /&gt;
    &lt;ol&gt;
      &lt;li&gt;All web pages’ HTML must be prepared in advance.&lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;A large amount of HTML must be stored.&lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;The same HTML content must be written repeatedly.&lt;br /&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the HTML content is repetitive, creating a system to reuse the overlapping content seems like a solution.&lt;/p&gt;

&lt;p&gt;Fortunately, frameworks that automatically generate content already exist, notably the &lt;strong&gt;Jekyll&lt;/strong&gt; we intend to use.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Let’s remind…&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;Jekyll takes on the task of &lt;strong&gt;generating HTML&lt;/strong&gt;.&lt;/p&gt;

  &lt;p&gt;It manages files by separating the webpage’s structure, &lt;strong&gt;HTML&lt;/strong&gt;, and the content, &lt;strong&gt;markdown&lt;/strong&gt;.
&lt;img src=&quot;/assets/images/jekyll/image8.jpg&quot; alt=&quot;Alt text&quot; /&gt;
Then, through a process called &lt;strong&gt;build&lt;/strong&gt;, it produces web pages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ultimately, we use Jekyll for a more straightforward and convenient composition of static websites.&lt;/p&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;&lt;em&gt;In Conclusion…&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;I’ve heard about using Jekyll for personal blogs. 
However, it wasn’t immediately clear to me what Jekyll is and why it’s used.&lt;/p&gt;

&lt;p&gt;So, I started writing this article to help understand it easily. 
Since the goal is to comprehend the purpose of Jekyll, 
I’ve omitted as much technical content as possible.&lt;/p&gt;

&lt;div class=&quot;message&quot;&gt;
In reality, there are many components needed to build a webpage.
Beyond HTML, there are scripts, CSS, assets, and more. &lt;br /&gt;
&lt;br /&gt;
Dynamic websites also involve more complex logic and structure, 
but I&apos;ve removed technical details to simplify the explanation. &lt;br /&gt;
&lt;br /&gt;
I hope this doesn&apos;t cause any confusion.
&lt;/div&gt;

&lt;p&gt;For more detailed information about Jekyll, including how it works and its file structure, please refer to the link below.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 

</feed>
