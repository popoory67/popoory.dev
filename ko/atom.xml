<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Life Debugger</title>
 <link href="https://popoory67.github.io//ko/atom.xml" rel="self"/>
 <link href="https://popoory67.github.io//ko/"/>
 <updated>2024-03-24T11:07:47+00:00</updated>
 <id>https://popoory67.github.io/</id>
 <author>
   <name>popoory67</name>
   <email>bozeury@gmail.com</email>
 </author>

 
 <entry>
   <title>2. Jekyll 시작하기</title>
   <link href="https://popoory67.github.io//ko/jekyll/2024-03-23-jekyll-tutorial/"/>
   <updated>2024-03-22T00:00:00+00:00</updated>
   <id>https://popoory67.github.io//jekyll/Jekyll(2).ko</id>
   <content type="html">&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#jekyll-시작하기&quot;&gt;Jekyll 시작하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jekyll-웹-사이트&quot;&gt;Jekyll 웹 사이트&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-github-repository-생성&quot;&gt;1) Github Repository 생성&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-local-작업-환경-만들기&quot;&gt;2) Local 작업 환경 만들기&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-jekyll-파일-생성&quot;&gt;3) Jekyll 파일 생성&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#4-local-빌드&quot;&gt;4) Local 빌드&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#5-commit-and-push&quot;&gt;5) Commit and Push&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#6-deploy&quot;&gt;6) Deploy&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#7-웹-사이트-접속하기&quot;&gt;7) 웹 사이트 접속하기&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#local-서버-문제&quot;&gt;Local 서버 문제&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#division-문제&quot;&gt;Division 문제&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;이전 포스팅에서 &lt;a href=&quot;../2024-03-22-about-jekyll/&quot;&gt;Jekyll이 무엇인지, 사용하는 목적과 목표가 무엇인지&lt;/a&gt; 알아봤습니다.&lt;/p&gt;

&lt;p&gt;이번 포스팅에서는 Jekyll을 &lt;em&gt;어떻게 사용하는지&lt;/em&gt; 간략하게 알아보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-시작하기&quot;&gt;&lt;strong&gt;Jekyll 시작하기&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;이전 포스팅에서 Jekyll은 Ruby 기반 프레임워크라고 설명했습니다.&lt;/p&gt;

&lt;p&gt;그래서 &lt;a href=&quot;https://jekyllrb-ko.github.io/docs/&quot;&gt;Jekyll 설치&lt;/a&gt;는 크게 두 단계로 진행됩니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Ruby 기반 프레임워크이기 때문에 &lt;a href=&quot;https://www.ruby-lang.org/ko/downloads/&quot;&gt;Ruby 설치&lt;/a&gt;가 필요합니다.&lt;br /&gt;
Ruby는 공식 사이트에서 &lt;em&gt;2.4.0 이상의 버전&lt;/em&gt;을 다운로드 받으면 됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ruby 설치 후, &lt;strong&gt;Jekyll&lt;/strong&gt;과 &lt;strong&gt;Bundler Gem&lt;/strong&gt;을 설치해줘야 합니다.&lt;br /&gt;&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install jekyll bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;기본적으로 위 커맨드를 Windows CMD, Mac Terminal에 입력하여 설치하지만, 더 자세한 내용이 필요하다면 아래 링크를 참고하시는 것이 좋습니다.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://jekyllrb-ko.github.io/docs/installation/windows/&quot;&gt;Windows 설치 방법&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://jekyllrb-ko.github.io/docs/installation/macos/&quot;&gt;Mac 설치 방법&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;jekyll-웹-사이트&quot;&gt;&lt;strong&gt;Jekyll 웹 사이트&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Jekyll 설치가 완료되었다면, 이제 웹 사이트를 만들 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;1-github-repository-생성&quot;&gt;1) Github Repository 생성&lt;/h3&gt;
&lt;p&gt;웹 사이트의 저장소 겸 경로가 될 Github Repository를 생성합니다.&lt;/p&gt;

&lt;p&gt;웹 페이지를 저장소에 올려서 운영하는 &lt;em&gt;정적 웹 사이트&lt;/em&gt; 방식을 사용하기 위해서는 저장소가 필요합니다.
Github에서는 Repository를 정적 웹 사이트로 운영할 수 있는 시스템이 있기 때문에 이것을 활용할 것입니다.&lt;/p&gt;

&lt;p&gt;Github page를 만드는 내용은 아래 사이트를 참고바랍니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://docs.github.com/ko/pages/quickstart&quot;&gt;Github page 시작하기&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;2-local-작업-환경-만들기&quot;&gt;2) Local 작업 환경 만들기&lt;/h3&gt;
&lt;p&gt;Repository를 만들었다면 Local에서 작업할 수 있는 환경을 만들어야 합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Github에서 생성한 github.io의 Repository에서 경로를 복사합니다.
&lt;img src=&quot;/assets/images/jekyll/image9.jpg&quot; alt=&quot;Alt text&quot; class=&quot;post-markdown-img80&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;형상관리 툴을 사용하여 Local에서 Clone합니다.
소스 경로(URL)과 Clone할 디렉토리를 입력합니다.
(아래 이미지는 SourceTree 기준)
&lt;img src=&quot;/assets/images/jekyll/image10.jpg&quot; alt=&quot;Alt text&quot; class=&quot;post-markdown-img80&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이제 Local에서 작업할 수 있는 환경에 만들어졌습니다.&lt;/p&gt;

&lt;h3 id=&quot;3-jekyll-파일-생성&quot;&gt;3) Jekyll 파일 생성&lt;/h3&gt;
&lt;p&gt;지금은 Repository에는 웹 사이트라고 할만한 것이 없습니다.
여기에 HTML, Script, CSS, Imagae 등 여러가지 리소스를 추가해서 웹 사이트를 만들어나갈 것입니다.&lt;/p&gt;

&lt;p&gt;이 리소스들은 그대로 올려도 반영되지만, 우리는 왜 굳이 Jekyll을 사용하는지 이전 포스트에서 충분히 알았습니다.
그래서 Jekyll을 사용할 수 있도록 Jekyll에서 제시하는 파일 구조를 만들 것입니다.&lt;/p&gt;

&lt;p&gt;우선, Windows CMD나 Mac Terminal 작업을 기준으로 설명하겠습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;콘솔 창에서 Repository의 상위 폴더로 이동합니다.&lt;br /&gt;
e.g) 폴더 경로가 C:\test라면 &lt;strong&gt;cd C:\&lt;/strong&gt; 입니다.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd [Repository 상위 폴더]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;새로운 Jekyll 사이트를 생성합니다.&lt;br /&gt;
e.g) Repository 이름이 test라면 &lt;strong&gt;jekyll new test&lt;/strong&gt; 입니다.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll new [Repository 이름]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;/assets/images/jekyll/image11.jpg&quot; alt=&quot;Alt text&quot; class=&quot;post-markdown-img100&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그러면 아래와 같은 파일들이 생성됩니다.
&lt;img src=&quot;/assets/images/jekyll/image12.jpg&quot; alt=&quot;Alt text&quot; class=&quot;post-markdown-img100&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-local-빌드&quot;&gt;4) Local 빌드&lt;/h3&gt;
&lt;p&gt;Jekyll을 사용할 수 있는 환경이 만들어졌습니다.&lt;/p&gt;

&lt;p&gt;파일의 역할이나 구조를 알아야 하지만, 지금은 html을 Jekyll로 생성해보는 것을 목표로 하겠습니다.&lt;/p&gt;

&lt;p&gt;Local에서 빌드하고 정상적으로 동작하는지 테스트해보겠습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Repository로 이동
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd [Repository 경로]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Local Build
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Local Server Test
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;앞서 진행한 내용에 큰 문제가 없다면 아래 로그와 같을 것입니다.
&lt;img src=&quot;/assets/images/jekyll/image13.jpg&quot; alt=&quot;Alt text&quot; class=&quot;post-markdown-img100&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;참고: &lt;a href=&quot;#local-서버-문제&quot;&gt;만약 문제가 있다면&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이제 &lt;a href=&quot;http://localhost:4000&quot;&gt;http://localhost:4000&lt;/a&gt;으로 접속하여 웹 사이트가 정상 출력이 되는지 확인해봅니다.
&lt;img src=&quot;/assets/images/jekyll/image15.jpg&quot; alt=&quot;Alt text&quot; class=&quot;post-markdown-img80&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 화면이 나왔다면 성공입니다.&lt;/p&gt;

&lt;h3 id=&quot;5-commit-and-push&quot;&gt;5) Commit and Push&lt;/h3&gt;
&lt;p&gt;Local에서 문제없이 작동했으니, Repository에 반영합니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit -a -m &quot;your message&quot;
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;6-deploy&quot;&gt;6) Deploy&lt;/h3&gt;
&lt;p&gt;Repository에 반영이 되었다면 Github Repository에서 Build and Deploy를 시작합니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Build: 소스 코드를 실행 가능한 소프트웨어로 변환하는 과정
Deploy: 빌드된 소프트웨어를 특정 환경에 설치하고 구성하는 과정&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Deploy까지 성공했다면 아래와 같을 것입니다.
&lt;img src=&quot;/assets/images/jekyll/image16.jpg&quot; alt=&quot;Alt text&quot; class=&quot;post-markdown-img100&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;7-웹-사이트-접속하기&quot;&gt;7) 웹 사이트 접속하기&lt;/h3&gt;
&lt;p&gt;별도로 URL 설정을 바꾸지 않았다면, Repository 이름과 URL이 동일할 것입니다.
Deploy가 성공적으로 완료가 되었다면 URL로 접속해봅니다.&lt;/p&gt;

&lt;p&gt;경로는 https로 시작해야 합니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://[나의 Github ID].github.io/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;성공했다면 Local 서버에서 확인했던 화면과 동일할 것입니다.
&lt;img src=&quot;/assets/images/jekyll/image15.jpg&quot; alt=&quot;Alt text&quot; class=&quot;post-markdown-img80&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다른 사람도 접근할 수 있는 웹 사이트를 Jekyll로 만들었습니다.&lt;/p&gt;

&lt;p&gt;지금은 기본 화면이지만, 리소스를 사용하기에 따라 좋은 웹 사이트를 만들 수 있습니다.
자세한 내용은 아래 Theme 설명서를 읽고 참고하시길 바랍니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://jekyllrb-ko.github.io/docs/themes/&quot;&gt;Jekyll Theme&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;local-서버-문제&quot;&gt;&lt;strong&gt;Local 서버 문제&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;division-문제&quot;&gt;Division 문제&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;현상&lt;/strong&gt;&lt;br /&gt;
아래와 같은 메시지가 발생&lt;br /&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Deprecation Warning: Using / for division outside of calc() is deprecated and will be removed in Dart Sass 2.0.0.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;/assets/images/jekyll/image14.jpg&quot; alt=&quot;Alt text&quot; class=&quot;post-markdown-img100&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;해결 방법&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;나눗셈 연산자는 더이상 사용하지 않으니 math, calc 함수를 사용하라는 Warning 메시지입니다.&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;문제가 발생한 파일로 이동하여 / 연산자를 제거하고 math, calc 함수로 대체하면 됩니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;하지만 Warning이므로 반드시 해결하지 않아도 됩니다.&lt;/li&gt;
      &lt;li&gt;만약에 기본 페이지 테스트 진행 중에 발생했다면, 이후에 다른 템플릿이나 화면을 구성하게 될테니 수정하지 않아도 괜찮습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>1. Jekyll에 대해서</title>
   <link href="https://popoory67.github.io//ko/jekyll/2024-03-22-about-jekyll/"/>
   <updated>2024-03-22T00:00:00+00:00</updated>
   <id>https://popoory67.github.io//jekyll/Jekyll(1).ko</id>
   <content type="html">&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#jekyll&quot;&gt;Jekyll&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-예시&quot;&gt;1) 예시&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-jekyll의-역할&quot;&gt;2) Jekyll의 역할&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#동적-웹-사이트&quot;&gt;동적 웹 사이트&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-동적-웹-사이트-방식&quot;&gt;1) 동적 웹 사이트 방식&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-예시&quot;&gt;2) 예시&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#웹-사이트를-운영하는-방법&quot;&gt;웹 사이트를 운영하는 방법&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#정적-웹-사이트&quot;&gt;&lt;strong&gt;정적 웹 사이트&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#글을-마치며&quot;&gt;글을 마치며…&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Jekyll을 시작하는 사용자들은 블로그나 나만의 웹 사이트를 만들기 위해 사용할 것이라고 생각합니다.&lt;/p&gt;

&lt;p&gt;그렇다면 Jekyll이 무엇이길래 웹 사이트를 만드는 데에 사용하는 걸까요?&lt;/p&gt;

&lt;h2 id=&quot;jekyll&quot;&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;은 &lt;strong&gt;정적 웹 사이트&lt;/strong&gt;를 구성하는 파일을 생성하는 프레임워크입니다.
Ruby 언어로 개발되었으며, 내가 정의한 형식에 맞게 자동으로 생성해줍니다.&lt;/p&gt;

&lt;p&gt;여기서 &lt;em&gt;자동으로 생성해준다는 것&lt;/em&gt;이 어떤 의미인지 상황을 가정하여 설명하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;1-예시&quot;&gt;1) 예시&lt;/h3&gt;
&lt;p&gt;예를 들면, 아래와 같이 A, B, C라는 웹 페이지가 있습니다.
&lt;img src=&quot;/assets/images/jekyll/image7.jpg&quot; alt=&quot;Alt text&quot; /&gt;
A, B, C는 생김새는 같지만, 색상이 다릅니다.&lt;/p&gt;

&lt;p&gt;html 방식으로 설명하자면, html 구성은 같지만 데이터만 다른 경우입니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;html&lt;/strong&gt;은 이미지, 텍스트와 같은 컨텐츠가 어느 위치에 어떤 모양으로 배치가 되어있는지 적혀있는 &lt;strong&gt;텍스트 파일&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이를 텍스트로 표현하면 아래와 같습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt; A Contents &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt; B Contents &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt; C Contents &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이 내용을 분석하면 이렇습니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;“&amp;lt;html&amp;gt; &amp;lt;/html&amp;gt;“이 반복된다.&lt;/li&gt;
  &lt;li&gt;“Contents”는 다르다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;즉, html을 작성할 때 마다 &amp;lt;html&amp;gt; &amp;lt;/html&amp;gt;을 매번 입력해줘야 하는 불편한 상황입니다.&lt;/p&gt;

&lt;p&gt;하지만 Jekyll을 사용한다면 그럴 필요가 없습니다.&lt;/p&gt;

&lt;h3 id=&quot;2-jekyll의-역할&quot;&gt;2) Jekyll의 역할&lt;/h3&gt;
&lt;p&gt;Jekyll은 html을 생성해주는 작업을 합니다.&lt;/p&gt;

&lt;p&gt;웹 페이지의 뼈대가 되는 html, 컨텐츠를 구성하는 markdown으로 분리하여 파일을 관리합니다.
&lt;img src=&quot;/assets/images/jekyll/image8.jpg&quot; alt=&quot;Alt text&quot; /&gt;
그리고 빌드라는 과정으로 웹 페이지를 만들어냅니다.&lt;/p&gt;

&lt;p&gt;Jekyll은 html을 생성해주는 도구라는 것을 알았습니다.
하지만 그럼에도 Jekyll이 어느 정도로 편리한 것인지, 왜 굳이 사용하려는지 감이 잘 잡히지 않습니다.&lt;/p&gt;

&lt;p&gt;쉽게 설명하기 위해서, 동적 웹 사이트를 설명하고 비교해보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;동적-웹-사이트&quot;&gt;&lt;strong&gt;동적 웹 사이트&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;1-동적-웹-사이트-방식&quot;&gt;1) 동적 웹 사이트 방식&lt;/h3&gt;
&lt;p&gt;Google, Amazon 등 우리가 알고 있는 웹 사이트들은 &lt;em&gt;서버에서&lt;/em&gt; html을 생성하여 사람들에게 보여줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/jekyll/image1.jpg&quot; alt=&quot;Alt text&quot; /&gt;
이를 동적 웹 사이트 방식이라고 합니다.&lt;/p&gt;

&lt;h3 id=&quot;2-예시&quot;&gt;2) 예시&lt;/h3&gt;
&lt;p&gt;이해를 돕기 위해 일반적인 상황을 가정해보겠습니다.&lt;/p&gt;

&lt;p&gt;예를 들면, 어떤 사용자가 Apple이라는 단어를 검색했습니다.
&lt;img src=&quot;/assets/images/jekyll/image2.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그러면 서버는 Apple이라는 정보를 가지고 있는 웹 사이트들을 찾습니다.
그리고 사용자의 모니터에 Apple 검색 결과를 보여줍니다.
&lt;img src=&quot;/assets/images/jekyll/image3.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 과정에서 서버는 아래와 같이 세 단계의 작업을 합니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Apple 데이터를 찾는다.&lt;/li&gt;
  &lt;li&gt;Apple 데이터를 삽입한 html 파일을 생성한다.&lt;/li&gt;
  &lt;li&gt;사용자의 화면에 html을 표시합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이것이 동적으로 웹 사이트를 표시하는 과정입니다.&lt;/p&gt;

&lt;h2 id=&quot;웹-사이트를-운영하는-방법&quot;&gt;&lt;strong&gt;웹 사이트를 운영하는 방법&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;앞서 서버로 html을 생성하는 방식을 설명했지만, 웹 사이트를 운영하는 데에 &lt;em&gt;반드시&lt;/em&gt; 서버가 필요할까요?&lt;/p&gt;

&lt;p&gt;그렇지는 않습니다.&lt;/p&gt;

&lt;p&gt;웹 사이트의 핵심은 &lt;em&gt;html을 열어보는 것&lt;/em&gt;입니다.
&lt;img src=&quot;/assets/images/jekyll/image4.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그렇다면 html 파일을 &lt;em&gt;저장소&lt;/em&gt;에 업로드하고, 다른 사람이 그것을 다운로드해서 봐도 되지 않을까요?
&lt;img src=&quot;/assets/images/jekyll/image5.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;네, 가능합니다.&lt;/p&gt;

&lt;p&gt;이와 같이 html을 저장소에 업로드하여 운영하는 방식을 &lt;strong&gt;정적 웹 사이트&lt;/strong&gt;라고 합니다.&lt;/p&gt;

&lt;h2 id=&quot;정적-웹-사이트&quot;&gt;&lt;strong&gt;정적 웹 사이트&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;정적 웹 사이트는 웹 사이트를 구성하는 &lt;strong&gt;모든&lt;/strong&gt; html를 미리 생성합니다. 그리고 저장소에 html들을 업로드하여 다른 사람에게 보여주는 방식입니다.
&lt;img src=&quot;/assets/images/jekyll/image6.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그래서 동적 방식에 비해 html을 생성하는 과정이 없고, 그만큼 빠르다는 장점이 있습니다.&lt;/p&gt;

&lt;p&gt;하지만 동적 웹 사이트처럼 웹 사이트를 만들어주는 시스템은 없습니다.
그래서 &lt;strong&gt;모든 html을 사전에 만들어야 놓아야 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그래서 저장해야하는 html의 양이 많고, 중복되는 html 내용도 많습니다.
html을 작성하는 입장에서는 동일한 작업을 매번 계속해야 하므로 작업이 매우 비효율적입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;장점&lt;br /&gt;
1) 실시간으로 html 생성하는 과정이 필요없다.&lt;br /&gt;
2) 웹 페이지 표시 속도가 빠르다.&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;단점&lt;br /&gt;
1) 모든 웹 페이지의 html을 전부 만들어야 한다.&lt;br /&gt;
2) 저장해야 하는 html의 양이 많다.&lt;br /&gt;
3) 동일한 html의 내용을 매번 작성해야 한다.&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;html 내용이 중복이 된다면, 중복되는 내용을 재사용하도록 시스템을 만들면 해결될 것 같습니다.&lt;/p&gt;

&lt;p&gt;정말 다행스럽게도 이미 자동으로 만들어주는 프레임워크들이 존재하는데, 대표적으로 우리가 사용하려는 &lt;strong&gt;Jekyll&lt;/strong&gt;이 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;복습…&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;Jekyll은 &lt;strong&gt;html을 생성해주는 작업&lt;/strong&gt;을 합니다.&lt;/p&gt;

  &lt;p&gt;웹 페이지의 뼈대가 되는 &lt;strong&gt;html&lt;/strong&gt;, 컨텐츠를 구성하는 &lt;strong&gt;markdown&lt;/strong&gt;으로 분리하여 파일을 관리합니다.
&lt;img src=&quot;/assets/images/jekyll/image8.jpg&quot; alt=&quot;Alt text&quot; /&gt;
그리고 &lt;strong&gt;빌드&lt;/strong&gt;라는 과정으로 웹 페이지를 만들어냅니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;결과적으로, 우리는 정적 웹 사이트를 더 쉽고 편하게 구성하기 위해서 Jekyll을 사용하는 것입니다.&lt;/p&gt;

&lt;h2 id=&quot;글을-마치며&quot;&gt;&lt;em&gt;글을 마치며…&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;개인 블로그를 운영할 때 Jekyll을 사용한다는 이야기를 들었습니다.
하지만 Jekyll이 무엇이고 왜 사용하는지는 바로 이해하기가 어려웠습니다.&lt;/p&gt;

&lt;p&gt;그래서 쉽게 이해를 돕기 위해서 이 글을 적기 시작했습니다.
Jekyll의 목적을 이해하는 것이 목표이기 때문에 기술적인 내용은 최대한 배제했습니다.&lt;/p&gt;

&lt;div class=&quot;message&quot;&gt;
사실, 웹 페이지를 구성하기 위해 필요한 것들이 정말 많습니다.&lt;br /&gt;
html 외에도 script, css, 애셋 등등 다양한 리소스들이 있습니다.&lt;br /&gt;
동적 웹 사이트도 로직과 구조가 훨씬 더 복잡하지만, 쉽게 설명하기 위해서 기술적인 내용은 제거했습니다.&lt;br /&gt;
&lt;br /&gt;
부디 혼동이 없으시길 바랍니다.
&lt;/div&gt;

&lt;p&gt;Jekyll에 대해 자세한 내용, 작동 원리, 파일 구조와 같은 내용들은 아래 링크를 참고 부탁드립니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://jekyllrb-ko.github.io/&quot;&gt;Jekyll 한국어&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 

</feed>
